







  var years = [];
  var values = [];
  var total = [];
  Object.entries(data).forEach(([key, value]) => {
    key = +key;
    value = +value;
    years.push(key);
    values.push(value);
    total.push({"year":key, "earnings":value});
  })
  // console.log(total[0].year);

  // if the SVG area isn't empty when the browser loads,
  // remove it and replace it with a resized version of the chart
  var svgArea = d3.select("#lolliChart").select("svg");

  // clear svg is not empty
  if (!svgArea.empty()) {
      svgArea.remove();
  }

  var svgWidth = window.innerWidth;
  var svgHeight = window.innerHeight*0.5;

  // set the dimensions and margins of the graph
  var margin = {top: 10, right: 30, bottom: 90, left: 50},
    width = svgWidth - margin.left - margin.right,
    height = svgHeight - margin.top - margin.bottom;

  // Append the svg object to the body of the page
  var svg = d3.select("#lolliChart")
    .append("svg")
    .attr("width", svgWidth)
    .attr("height", svgHeight);
  
  // Append an SVG group
  var chartGroup = svg.append("g")
    .attr("transform", `translate(${margin.left}, ${margin.top})`);

    function yLinScale(values) {
  
      var yScale = d3.scaleLinear()
        .domain([0, d3.max(values)])
        .range([ height, 0]);
      
      return yScale;
    }
    
    function yAxUpdate(yScale, yAxis) {
     
      yAxis.transition()
        .duration(500)
        .call(d3.axisLeft(yScale));
    
      return yAxis;
    }
    
    function circlesY(circleGroup, yScale) {
      circleGroup.transition()
        .duration(500)
        .attr("cy", yScale);
    }
    
    function newToolTip(circleGroup) {
    
      var toolTip = d3.tip()
        .attr("class", "tip")
        .offset([80, -60])
        .html(function(data) {
          return(`<strong>${data}<br>Earnings: ${data}`)
        });
    
      circleGroup.call(toolTip);
    
      circleGroup.on("mouseover", function(data) {
          toolTip.show(data);
        })
        .on("mouseout", function(data) {
          toolTip.hide(data);
        });
    
        return circleGroup;
    
    }
  
  // X Scale
  var xScale = d3.scaleBand()
  .domain(years)
  .range([ 0, width])
  .padding(1);

  yScale = yLinScale(values);
  
  var xAxis = chartGroup.append("g")
    .attr("transform", `translate(0, ${height})`)
    .call(d3.axisBottom(xScale))
    .selectAll("text")
    .attr("transform", "translate(-10,0)rotate(-45)")
    .style("text-anchor", "end");

  var yAxis = chartGroup.append("g")
    .call(d3.axisLeft(yScale))

  var circles = chartGroup.selectAll("mycircle")
    .data(total)
    .enter();

  var circleGroup = circles
    .append("circle")
    .attr("cx", d => xScale(d.year))
    .attr("cy", d => yScale(d.earnings))
    .attr("r", "5")
    .style("fill", "#69b3a2")
    .attr("stroke", "black");

  yAxis = yAxUpdate(yScale, yAxis);
  circleGroup = circlesY(circleGroup, yScale);
  
  circleGroup = newToolTip(circlesGroup);

  


